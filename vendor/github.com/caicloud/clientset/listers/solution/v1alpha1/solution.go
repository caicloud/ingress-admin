/*
Copyright 2020 caicloud authors. All rights reserved.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/caicloud/clientset/pkg/apis/solution/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SolutionLister helps list Solutions.
type SolutionLister interface {
	// List lists all Solutions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Solution, err error)
	// Solutions returns an object that can list and get Solutions.
	Solutions(namespace string) SolutionNamespaceLister
	SolutionListerExpansion
}

// solutionLister implements the SolutionLister interface.
type solutionLister struct {
	indexer cache.Indexer
}

// NewSolutionLister returns a new SolutionLister.
func NewSolutionLister(indexer cache.Indexer) SolutionLister {
	return &solutionLister{indexer: indexer}
}

// List lists all Solutions in the indexer.
func (s *solutionLister) List(selector labels.Selector) (ret []*v1alpha1.Solution, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Solution))
	})
	return ret, err
}

// Solutions returns an object that can list and get Solutions.
func (s *solutionLister) Solutions(namespace string) SolutionNamespaceLister {
	return solutionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SolutionNamespaceLister helps list and get Solutions.
type SolutionNamespaceLister interface {
	// List lists all Solutions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Solution, err error)
	// Get retrieves the Solution from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Solution, error)
	SolutionNamespaceListerExpansion
}

// solutionNamespaceLister implements the SolutionNamespaceLister
// interface.
type solutionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Solutions in the indexer for a given namespace.
func (s solutionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Solution, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Solution))
	})
	return ret, err
}

// Get retrieves the Solution from the indexer for a given namespace and name.
func (s solutionNamespaceLister) Get(name string) (*v1alpha1.Solution, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("solution"), name)
	}
	return obj.(*v1alpha1.Solution), nil
}
